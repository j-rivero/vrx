name: Release to ghrc.io

on:
  push:
    branches: ['jrivero/release_dockerfiles']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
      # 

      - name: Docker compose build and push
        run: |
          cd docker
          docker compose build -f docker-compose.yml base builder devel
          # tag
          docker tag vrx-base:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          docker tag vrx-builder:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder
          docker tag vrx-release:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-release
          # push
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-release
          # TESTING push with tags
          docker tag vrx-base:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ steps.meta.outputs.tags }}
          docker tag vrx-builder:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder:${{ steps.meta.outputs.tags }}
          docker tag vrx-release:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-release:${{ steps.meta.outputs.tags }}

